{"version":3,"sources":["dist/images/cards/card-cassandra.jpg","dist/images/cards/card-alister.jpg","dist/images/cards/card-defender.jpg","dist/images/cards/card-mask.jpg","utils/cardsArray.js","utils/functions.js","components/App.js","index.js"],"names":["module","exports","cardsArray","id","img","casandra","name","code","alister","defender","mask","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","props","toggleShowAllCards","document","querySelectorAll","forEach","card","classList","toggle","setActiveCards","cardCode","cardId","currentTarget","state","firstCard","secondCard","chosenCard","ref","console","log","add","setState","setTimeout","checkCardsForMatch","deleteCardFromDeck","hideChosenCard","remove","cardCounter","makeGameDeck","cards","gameDeck","item","Object","assign","push","curtain","React","createRef","this","current","twoCardsChosen","className","href","map","key","onClick","undefined","src","PureComponent","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.01afbbf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/card-cassandra.2506966c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/card-alister.c3bb77d6.jpg\";","module.exports = __webpack_public_path__ + \"static/media/card-defender.82ee34e9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/card-mask.db1b7222.jpg\";","import casandra from \"../dist/images/cards/card-cassandra.jpg\";\r\nimport alister from  \"../dist/images/cards/card-alister.jpg\";\r\nimport defender from \"../dist/images/cards/card-defender.jpg\";\r\nimport mask from \"../dist/images/cards/card-mask.jpg\";\r\n\r\n\r\nconst cardsArray = [\r\n    {\r\n        id: 2,\r\n        img: casandra,\r\n        name: \"Cassandra\",\r\n        code: \"q1w2e3\"\r\n    },\r\n    {\r\n        id: 3,\r\n        img: alister,\r\n        name: \"Alister\",\r\n        code: \"q1w234\"\r\n    },\r\n    {\r\n        id: 4,\r\n        img: defender,\r\n        name: \"Defender\",\r\n        code: \"q12ks4\"\r\n    }\r\n    ,\r\n    {\r\n        id: 5,\r\n        img: mask,\r\n        name: \"Mask\",\r\n        code: \"q3pfs4\"\r\n    }\r\n];\r\n\r\nexport default cardsArray;","\r\nexport const shuffle = array => {\r\n    let currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n};","import React, {PureComponent} from 'react';\n\nimport \"./App.styles.scss\";\nimport cardsArray from \"../utils/cardsArray\";\nimport {shuffle} from \"../utils/functions\";\n\nclass App extends PureComponent {\n    constructor(props) {\n        super(props);\n        this.curtain = React.createRef();\n        this.state = {\n            cards: [],\n            firstCard: {},\n            secondCard: {},\n            cardCounter: 0\n        }\n    };\n\n    componentDidMount() {\n        this.curtain.current.classList.add(\"active\");\n\n        this.setState({cards: this.makeGameDeck(cardsArray), cardCounter: cardsArray.length}, () => {\n            setTimeout(() => {\n                return this.toggleShowAllCards()\n            }, 1000);\n            setTimeout(() => {\n                this.curtain.current.classList.remove(\"active\");\n                return this.toggleShowAllCards()\n            }, 4000)\n        });\n    };\n\n    toggleShowAllCards = () => {\n\n        const cards = document.querySelectorAll(\".card\");\n        cards.forEach(card => {\n            card.classList.toggle(\"chosen\")\n        })\n    };\n\n    setActiveCards = (cardCode, cardId) => ({currentTarget}) => {\n        const {firstCard, secondCard} = this.state;\n        const chosenCard = {\n            ref: currentTarget,\n            code: cardCode,\n            id: cardId\n        };\n        if (cardId === firstCard.id || cardId === secondCard.id) {\n            return console.log(\"this card already chosen\");\n        }\n        currentTarget.classList.add(\"chosen\");\n\n        if (!firstCard.id) {\n            return this.setState({firstCard: chosenCard});\n        } else {\n            return this.setState({secondCard: chosenCard}, () => {\n                return setTimeout(() => this.checkCardsForMatch(), 1000);\n            });\n        }\n    };\n\n    checkCardsForMatch = () => {\n        const {firstCard, secondCard} = this.state;\n        return firstCard.code === secondCard.code ? this.deleteCardFromDeck(firstCard.code) : this.hideChosenCard()\n    };\n\n    hideChosenCard = () => {\n        const {firstCard, secondCard} = this.state;\n\n\n        return setTimeout(() => this.setState({\n            firstCard: {},\n            secondCard: {}\n        }, () => {\n            firstCard.ref.classList.remove(\"chosen\");\n            secondCard.ref.classList.remove(\"chosen\");\n        }), 2000)\n\n    };\n\n    deleteCardFromDeck = () => {\n        const {firstCard, secondCard, cardCounter} = this.state;\n\n        firstCard.ref.classList.add(\"successChosen\");\n        secondCard.ref.classList.add(\"successChosen\");\n\n        setTimeout(() => this.setState({\n                firstCard: {},\n                secondCard: {},\n                cardCounter: (cardCounter - 1)\n            }, () => {\n                firstCard.ref.classList.add(\"hidden\");\n                secondCard.ref.classList.add(\"hidden\");\n            }\n            ),\n            2000\n        )\n\n    };\n    makeGameDeck = cards => {\n        const gameDeck = [...cards];\n\n        cards.forEach(item => {\n            const card = Object.assign({}, item);\n            card.id += 34;\n            gameDeck.push(card)\n        });\n        shuffle(gameDeck);\n        return gameDeck\n    };\n\n    render() {\n        const {cards, firstCard, secondCard, cardCounter} = this.state;\n        const twoCardsChosen = firstCard.id && secondCard.id;\n        return (\n            <div className=\"App\">\n                <div className=\"curtain\" ref={this.curtain}/>\n                <header className=\"App-header\">\n                    <a href=\"/\" className=\"App-header--resetBtn\"> Reset</a>\n                </header>\n                <main className=\"App-body\">\n                    {cardCounter === 0 ? (\n                        <div className=\"finalCurtain\">\n                            <p className=\"finalCurtain-title\">Congratulations!</p>\n                            <p className=\"finalCurtain-label\">Level passed</p>\n                            <p className=\"finalCurtain-label\"><a href=\"/\">Play again</a></p>\n                        </div>\n                    ) : (\n                        <div className=\"desk\">\n                            {cards.map((card) => {\n                                    return (\n                                        <div className=\"card\"\n                                             key={card.id}\n                                             onClick={twoCardsChosen ? undefined : this.setActiveCards(card.code, card.id)}\n                                        >\n                                            <img\n                                                className=\"card-img\" src={card.img}/>\n                                            <div className=\"card-face\"/>\n                                        </div>\n                                    )\n                                }\n                            )}\n                        </div>\n                    )\n                    }\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}